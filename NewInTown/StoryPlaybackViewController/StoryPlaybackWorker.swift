//
//  StoryPlaybackWorker.swift
//  NewInTown
//
//  Created by Jan Trutzschler on 11/10/2018.
//  Copyright (c) 2018 teatracks. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import AVFoundation
import MediaPlayer

class SoundFileReadWorker {
    func getBundleSoundFileURLs(inSubdirectory subdirectory: String?) -> [URL]? {
        return Bundle.main.urls(forResourcesWithExtension: "mp3", subdirectory: subdirectory)
    }
}

protocol PlayWorkerDelegate: class {
    func didFinishPlaying(worker: PlayWorker)
    func didStartPlaying(worker: PlayWorker)
}

class PlayWorker: NSObject, AVAudioPlayerDelegate {
    
    var currentURL: URL?
    
    weak var delegate: PlayWorkerDelegate?
    private var player: AVAudioPlayer?
    private var currentNumberOfPlays: Int = 0
    private var numberOfLoops: Int = 2
    private var waitTime: TimeInterval = 1
    
    var isPlaying: Bool {
        guard let player = player else {
            return false
        }
        return player.isPlaying
    }
    
    override init() {
        super.init()
        setupRemoteTransportControls()
    }
    
    func playSoundFile(atURL url:URL, numberOfLoops: Int, waitTime: TimeInterval) {
        
        if let currentPlayer = player {
            currentPlayer.stop()
        }
        
        currentURL = url
        self.waitTime = waitTime
        
        do {
            let player = try AVAudioPlayer(contentsOf: url)
            // not using player.numberOfLoops because we want to control the pause in-between
            self.numberOfLoops = numberOfLoops
            player.delegate = self
            let succ = player.play()
            self.player = player
            delegate?.didStartPlaying(worker: self)
            if !succ {
                print("could not play \(url)")
            }
        } catch {
            print("could not init player for \(url)")
        }
    }
    
    
    func audioPlayerDidFinishPlaying(_ player: AVAudioPlayer, successfully flag: Bool) {
        currentNumberOfPlays = currentNumberOfPlays + 1
        if currentNumberOfPlays < numberOfLoops {
            DispatchQueue.main.asyncAfter(deadline: .now() + waitTime) {[weak self] in
                if let strongSelf = self, let currentURL = self?.currentURL {
                    strongSelf.playSoundFile(atURL: currentURL, numberOfLoops: strongSelf.numberOfLoops, waitTime: strongSelf.waitTime)
                }
            }
        } else {
            currentNumberOfPlays = 0
            delegate?.didFinishPlaying(worker: self)
        }
    }
    
    func play() {
        player?.play()
    }
    
    func pause() {
        player?.pause()
    }
    
    // MARK :
    //check: https://developer.apple.com/documentation/avfoundation/media_assets_playback_and_editing/creating_a_basic_video_player_ios_and_tvos/controlling_background_audio
    
    func setupRemoteTransportControls() {
        
        // Get the shared MPRemoteCommandCenter
        let commandCenter = MPRemoteCommandCenter.shared()
        
        // Add handler for Play Command
        commandCenter.playCommand.addTarget { [unowned self] event in
            self.play()
            return .success
            
            //            print("rate: \(self.player?.rate)")
            //            if self.player?.rate == 0.0 {
            //                self.player?.play()
            //                return .success
            //            }
            //            return .commandFailed
        }
        
        // Add handler for Pause Command
        commandCenter.pauseCommand.addTarget { [unowned self] event in
            self.pause()
            return .success
            //            if self.player?.rate == 1.0 {
            //                self.player?.pause()
            //                return .success
            //            }
            //            return .commandFailed
        }
    }
    
}


class StoryPlaybackWorker {
    
    func doSomeWork() {
        
    }
}
